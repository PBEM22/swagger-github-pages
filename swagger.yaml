---
openapi: 3.0.1
info:
  title: NVP-TEST API
  description: 배구 포지션 테스트 api명세서입니다.
  version: v1
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: 질문지 컨트롤러
  description: 질문지 컨트롤러입니다.
- name: 결과값(포지션) 컨트롤러
  description: 결과값(포지션) 컨트롤러입니다.
- name: 관리자 컨트롤러
  description: 관리자용 컨트롤러입니다.
- name: 방명록 컨트롤러
  description: 방명록 컨트롤러입니다.
paths:
  "/v1/admins/questions":
    get:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 전체 질문 불러오기"
      description: 질문, 질문 내용, 해당 문제에 대한 답변, 답변별 포지션들이 불러와집니다.
      operationId: getQuestions
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseListQuestionWithAnswersRes"
    put:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 질문지 수정"
      description: 질문지를 수정할 수 있습니다.
      operationId: updateQuestion
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateQuestionReq"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
    post:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 질문 생성"
      description: 질문을 생성합니다. (최대 10개)
      operationId: createQuestion
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateQuestionReq"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
  "/v1/visitors/hit":
    post:
      tags:
      - 방문자 컨트롤러
      summary: 사이트 방문
      description: 사이트 방문 시 현재 방문자 수 및 증가 불러오기 기능입니다.
      operationId: hitVisitor
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
  "/v1/results/my":
    post:
      tags:
      - 결과값(포지션) 컨트롤러
      summary: 내 결과 확인
      description: 내 테스트 결과 및 전체 포지션별 count 확인이 가능합니다.
      operationId: myResult
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MyResultReq"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseMyResultRes"
  "/v1/questbooks":
    get:
      tags:
      - 방명록 컨트롤러
      summary: 방명록 전체 조회
      description: 페이지네이션된 방명록 전체를 조회합니다.
      operationId: getAllGuestBooks
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponsePageGuestBookRes"
    post:
      tags:
      - 방명록 컨트롤러
      summary: 방명록 작성
      description: 방명록을 작성하는 기능입니다.
      operationId: createGuestBook
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateGuestBookReq"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseLong"
  "/v1/admins/results":
    get:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 전체 결과 확인하기"
      description: 지금껏 실행되었던 전체 결과들 확인이 가능합니다.
      operationId: getResults
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseResultStatusAllRes"
    post:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 결과(포지션) 추가"
      description: 새로운 결과(포지션)를 추가할 수 있습니다. (거의 안쓸듯)
      operationId: postResult
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateResultReq"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
  "/v1/admins/login":
    post:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 로그인"
      description: 관리자 로그인 기능입니다.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AdminLoginReq"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
  "/v1/results":
    get:
      tags:
      - 결과값(포지션) 컨트롤러
      summary: 결과 전체 조회
      description: 어떤 결과(포지션)들이 있는지 전체 조회할 수 있습니다.
      operationId: getResults_1
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseListResultRes"
  "/v1/results/{id}":
    get:
      tags:
      - 결과값(포지션) 컨트롤러
      summary: 결과 조회
      description: 해당하는 결과를 조회할 수 있습니다. (불필요한것 같음)
      operationId: getResult
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseResultRes"
  "/v1/questions":
    get:
      tags:
      - 질문지 컨트롤러
      summary: 전체 질문 불러오기
      description: 전체 질문을 불러옵니다.
      operationId: getQuestions_1
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseListQuestionWithAnswersRes"
  "/v1/questbooks/search":
    get:
      tags:
      - 방명록 컨트롤러
      summary: 방명록 검색
      description: 제목 또는 내용, 닉네임과 일치하는 내용을 검색합니다.
      operationId: searchGuestBooks
      parameters:
      - name: keyword
        in: query
        required: true
        schema:
          type: string
      - name: pageable
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponsePageGuestBookRes"
  "/v1/admins/search":
    get:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 방명록 검색"
      description: 제목 또는 내용, 닉네임과 일치하는 내용을 검색합니다.
      operationId: searchGuestBooks_1
      parameters:
      - name: keyword
        in: query
        required: true
        schema:
          type: string
      - name: pageable
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponsePageGuestBookRes"
  "/v1/admins/guestbooks":
    get:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 방명록 전체 조회"
      description: 방명록 전체 조회 기능입니다.
      operationId: getGuestBooks
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
  "/v1/questbooks/{guestBookId}":
    delete:
      tags:
      - 방명록 컨트롤러
      summary: 방명록 삭제
      description: 방명록을 삭제하는 기능입니다. 비밀번호가 일치해야합니다.
      operationId: deleteGuestBook
      parameters:
      - name: guestBookId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: password
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
  "/v1/admins/results/{id}":
    delete:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 결과(포지션) 삭제"
      description: 결과(포지션)를 삭제할 수 있습니다.
      operationId: deleteResult
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
  "/v1/admins/questions/{id}":
    delete:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 질문지 삭제"
      description: 질문지를 삭제할 수 있습니다.
      operationId: deleteQuestion
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
  "/v1/admins/logout":
    delete:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 로그아웃"
      description: 로그아웃 및 세션을 삭제합니다.
      operationId: logout
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
  "/v1/admins/guestbooks/{guestBookId}":
    delete:
      tags:
      - 관리자 컨트롤러
      summary: "[관리자] 방명록 삭제"
      description: guestBookId 기반으로 방명록을 삭제한다.
      operationId: deleteGuestBook_1
      parameters:
      - name: guestBookId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ApiResponseObject"
components:
  schemas:
    UpdateAnswerReq:
      type: object
      properties:
        answerId:
          type: integer
          format: int64
        answer:
          type: string
        resultId:
          type: integer
          format: int64
    UpdateQuestionReq:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
        questionInfo:
          type: string
        answers:
          type: array
          items:
            "$ref": "#/components/schemas/UpdateAnswerReq"
    ApiResponseObject:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
        error:
          "$ref": "#/components/schemas/ExceptionDTO"
    ExceptionDTO:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    MyResultReq:
      type: object
      properties:
        position:
          type: object
          additionalProperties:
            type: integer
            description: '포지션별 answer 선택 갯수 (예: LEFT, SETTER, CENTER, LIBERO'
            format: int32
          description: '포지션별 answer 선택 갯수 (예: LEFT, SETTER, CENTER, LIBERO'
          example:
            LEFT: 2
            SETTER: 1
            CENTER: 3
            LIBERO: 4
    ApiResponseMyResultRes:
      type: object
      properties:
        success:
          type: boolean
        data:
          "$ref": "#/components/schemas/MyResultRes"
        error:
          "$ref": "#/components/schemas/ExceptionDTO"
    MyResultRes:
      type: object
      properties:
        resultId:
          type: integer
          format: int64
        result:
          type: string
        resultModifier:
          type: string
        resultInfo:
          type: string
        resultStatus:
          type: object
          additionalProperties:
            type: integer
            description: '포지션별 [count / 전체] 퍼센테이지(%) (예: LEFT, SETTER, CENTER, LIBERO'
            format: int32
          description: '포지션별 [count / 전체] 퍼센테이지(%) (예: LEFT, SETTER, CENTER, LIBERO'
          example:
            LEFT: 25
            SETTER: 25
            CENTER: 50
            LIBERO: 0
    CreateGuestBookReq:
      required:
      - guestBookInfo
      - guestBookNickname
      - guestBookPassword
      type: object
      properties:
        guestBookNickname:
          pattern: "^(?!.*[\\u3131-\\u318E])^[a-zA-Z0-9]+$"
          type: string
        guestBookPassword:
          pattern: "^(?!.*[\\u3131-\\u318E])^[a-zA-Z0-9]+$"
          type: string
        guestBookInfo:
          type: string
    ApiResponseLong:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: integer
          format: int64
        error:
          "$ref": "#/components/schemas/ExceptionDTO"
    CreateResultReq:
      type: object
      properties:
        result:
          type: string
        resultModifier:
          type: string
        resultInfo:
          type: string
    AnswerReq:
      type: object
      properties:
        answer:
          type: string
        resultId:
          type: integer
          format: int64
    CreateQuestionReq:
      type: object
      properties:
        questionInfo:
          type: string
        answers:
          type: array
          items:
            "$ref": "#/components/schemas/AnswerReq"
    AdminLoginReq:
      type: object
      properties:
        id:
          type: string
        password:
          type: string
    ApiResponseListResultRes:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            "$ref": "#/components/schemas/ResultRes"
        error:
          "$ref": "#/components/schemas/ExceptionDTO"
    ResultRes:
      type: object
      properties:
        resultId:
          type: integer
          format: int64
        result:
          type: string
        resultModifier:
          type: string
        resultInfo:
          type: string
    ApiResponseResultRes:
      type: object
      properties:
        success:
          type: boolean
        data:
          "$ref": "#/components/schemas/ResultRes"
        error:
          "$ref": "#/components/schemas/ExceptionDTO"
    AnswerRes:
      type: object
      properties:
        answerId:
          type: integer
          format: int64
        answer:
          type: string
        resultId:
          type: integer
          format: int64
        result:
          type: string
    ApiResponseListQuestionWithAnswersRes:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            "$ref": "#/components/schemas/QuestionWithAnswersRes"
        error:
          "$ref": "#/components/schemas/ExceptionDTO"
    QuestionWithAnswersRes:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
        questionInfo:
          type: string
        answers:
          type: array
          items:
            "$ref": "#/components/schemas/AnswerRes"
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    ApiResponsePageGuestBookRes:
      type: object
      properties:
        success:
          type: boolean
        data:
          "$ref": "#/components/schemas/PageGuestBookRes"
        error:
          "$ref": "#/components/schemas/ExceptionDTO"
    GuestBookRes:
      type: object
      properties:
        guestBookId:
          type: integer
          format: int64
        guestBookNickname:
          type: string
        guestBookInfo:
          type: string
        createdAt:
          type: string
          format: date-time
    PageGuestBookRes:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/GuestBookRes"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          "$ref": "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    ApiResponseResultStatusAllRes:
      type: object
      properties:
        success:
          type: boolean
        data:
          "$ref": "#/components/schemas/ResultStatusAllRes"
        error:
          "$ref": "#/components/schemas/ExceptionDTO"
    ResultStatusAllRes:
      type: object
      properties:
        total:
          type: integer
          format: int32
        resultStatus:
          type: object
          additionalProperties:
            type: integer
            description: '포지션별 [count / 전체] 퍼센테이지(%) (예: LEFT, SETTER, CENTER, LIBERO'
            format: int32
          description: '포지션별 [count / 전체] 퍼센테이지(%) (예: LEFT, SETTER, CENTER, LIBERO'
          example:
            LEFT: 25
            SETTER: 25
            CENTER: 50
            LIBERO: 0
